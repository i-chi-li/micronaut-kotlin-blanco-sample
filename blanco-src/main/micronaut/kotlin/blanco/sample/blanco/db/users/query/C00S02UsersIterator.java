/*
 * This code is generated by blanco Framework.
 */
package micronaut.kotlin.blanco.sample.blanco.db.users.query;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import micronaut.kotlin.blanco.sample.blanco.db.runtime.exception.DeadlockException;
import micronaut.kotlin.blanco.sample.blanco.db.runtime.exception.TimeoutException;
import micronaut.kotlin.blanco.sample.blanco.db.runtime.util.BlancoDbUtil;
import micronaut.kotlin.blanco.sample.blanco.db.users.row.C00S02UsersRow;

/**
 * C00S02UsersIteratorクラス (QueryIterator)。
 *
 * 検索型SQL文をラッピングして各種アクセサを提供します。<br>
 * スクロール属性: forward_only<br>
 */
public class C00S02UsersIterator {
    /**
     * このクラスが内部的に利用するデータベース接続オブジェクト。
     *
     * データベース接続オブジェクトはコンストラクタの引数として外部から与えられます。<br>
     * トランザクションのコミットやロールバックは、このクラスの内部では実行しません。
     */
    protected Connection fConnection;

    /**
     * このクラスが内部的に利用するステートメントオブジェクト。
     *
     * このオブジェクトはデータベース接続オブジェクトから生成されて内部的に利用されます。<br>
     * closeメソッドの呼び出し時に、このオブジェクトのcloseを実行します。
     */
    protected PreparedStatement fStatement;

    /**
     * このクラスが内部的に利用する結果セットオブジェクト。
     *
     * このオブジェクトはデータベースステートメントオブジェクトから生成されて内部的に利用されます。<br>
     * closeメソッドの呼び出し時に、このオブジェクトのcloseを実行します。
     */
    protected ResultSet fResultSet;

    /**
     * C00S02UsersIteratorクラスのコンストラクタ。
     *
     * データベースコネクションオブジェクトを引数としてクエリクラスを作成します。<br>
     * このクラスの利用後は、必ず close()メソッドを呼び出す必要があります。<br>
     *
     * @param connection データベース接続
     */
    public C00S02UsersIterator(final Connection connection) {
        fConnection = connection;
    }

    /**
     * SQL定義書で与えられたSQL文を取得します。
     *
     * SQL入力パラメータとして #キーワードによる指定がある場合には、該当箇所を ? に置き換えた後の SQL文が取得できます。
     *
     * @return JDBCドライバに与えて実行可能な状態のSQL文。
     */
    public String getQuery() {
        return "SELECT \n  '1'\nFROM DUAL WHERE\n  EXISTS(\n    SELECT\n      user_id\n    FROM\n      users\n    WHERE\n      (? IS NULL OR user_id >= ?)\n      AND (? IS NULL OR user_id <= ?)\n      AND (? IS NULL OR user_name LIKE ?)\n      AND (? IS NULL OR password LIKE ?)\n      AND (? IS NULL OR email LIKE ?)\n      AND (? = FALSE OR email IS NULL)\n      AND (? IS NULL OR created_at >= ?)\n      AND (? IS NULL OR created_at <= ?)\n      AND (? IS NULL OR updated_at >= ?)\n      AND (? IS NULL OR updated_at <= ?)\n  )\n;";
    }

    /**
     * SQL定義書から与えられたSQL文をもちいてプリコンパイルを実施します。
     *
     * 内部的にConnection.prepareStatementを呼び出します。<br>
     *
     * @throws SQLException SQL例外が発生した場合。
     */
    public void prepareStatement() throws SQLException {
        close();
        prepareStatement(getQuery());
    }

    /**
     * 与えられたSQL文をもちいてプリコンパイルを実施(動的SQL)します。
     *
     * 動的に内容が変化するようなSQLを実行する必要がある場合にのみ、こちらのメソッドを利用します。<br>
     * そうではない場合には、このメソッドの利用は避けて prepareStatement()メソッド (引数なし)を呼び出してください。<br>
     * なぜなら、このメソッドではSQL文そのものをパラメータとして与えることができて自由度が高い一方、SQLインジェクションと呼ばれるセキュリティホールが発生する可能性を引き起こしてしまうからです。<br>
     * 内部的にConnection.prepareStatementを呼び出します。<br>
     *
     * @param query プリコンパイルを実施させたいSQL文。動的SQLの場合には、この引数には加工された後の実行可能なSQL文を与えます。
     * @throws SQLException SQL例外が発生した場合。
     */
    public void prepareStatement(final String query) throws SQLException {
        close();
        fStatement = fConnection.prepareStatement(query);
    }

    /**
     * SQL文に与えるSQL入力パラメータをセットします。
     *
     * 内部的には PreparedStatementにSQL入力パラメータをセットします。
     *
     * @param userIdFrom 'userIdFrom'列の値
     * @param userIdTo 'userIdTo'列の値
     * @param userName 'userName'列の値
     * @param password 'password'列の値
     * @param email 'email'列の値
     * @param emailIncludeNull 'emailIncludeNull'列の値
     * @param createdAtFrom 'createdAtFrom'列の値
     * @param createdAtTo 'createdAtTo'列の値
     * @param updatedAtFrom 'updatedAtFrom'列の値
     * @param updatedAtTo 'updatedAtTo'列の値
     * @throws SQLException SQL例外が発生した場合。
     */
    public void setInputParameter(final Integer userIdFrom, final Integer userIdTo, final String userName, final String password, final String email, final Boolean emailIncludeNull, final Date createdAtFrom, final Date createdAtTo, final Date updatedAtFrom, final Date updatedAtTo) throws SQLException {
        if (fStatement == null) {
            prepareStatement();
        }
        if (userIdFrom == null) {
            fStatement.setNull(1, java.sql.Types.INTEGER);
        } else {
            fStatement.setInt(1, userIdFrom.intValue());
        }
        if (userIdFrom == null) {
            fStatement.setNull(2, java.sql.Types.INTEGER);
        } else {
            fStatement.setInt(2, userIdFrom.intValue());
        }
        if (userIdTo == null) {
            fStatement.setNull(3, java.sql.Types.INTEGER);
        } else {
            fStatement.setInt(3, userIdTo.intValue());
        }
        if (userIdTo == null) {
            fStatement.setNull(4, java.sql.Types.INTEGER);
        } else {
            fStatement.setInt(4, userIdTo.intValue());
        }
        fStatement.setString(5, userName);
        fStatement.setString(6, userName);
        fStatement.setString(7, password);
        fStatement.setString(8, password);
        fStatement.setString(9, email);
        fStatement.setString(10, email);
        if (emailIncludeNull == null) {
            fStatement.setNull(11, java.sql.Types.BIT);
        } else {
            fStatement.setBoolean(11, emailIncludeNull.booleanValue());
        }
        if (createdAtFrom == null) {
            fStatement.setNull(12, java.sql.Types.TIMESTAMP);
        } else {
            fStatement.setTimestamp(12, new Timestamp(createdAtFrom.getTime()));
        }
        if (createdAtFrom == null) {
            fStatement.setNull(13, java.sql.Types.TIMESTAMP);
        } else {
            fStatement.setTimestamp(13, new Timestamp(createdAtFrom.getTime()));
        }
        if (createdAtTo == null) {
            fStatement.setNull(14, java.sql.Types.TIMESTAMP);
        } else {
            fStatement.setTimestamp(14, new Timestamp(createdAtTo.getTime()));
        }
        if (createdAtTo == null) {
            fStatement.setNull(15, java.sql.Types.TIMESTAMP);
        } else {
            fStatement.setTimestamp(15, new Timestamp(createdAtTo.getTime()));
        }
        if (updatedAtFrom == null) {
            fStatement.setNull(16, java.sql.Types.TIMESTAMP);
        } else {
            fStatement.setTimestamp(16, new Timestamp(updatedAtFrom.getTime()));
        }
        if (updatedAtFrom == null) {
            fStatement.setNull(17, java.sql.Types.TIMESTAMP);
        } else {
            fStatement.setTimestamp(17, new Timestamp(updatedAtFrom.getTime()));
        }
        if (updatedAtTo == null) {
            fStatement.setNull(18, java.sql.Types.TIMESTAMP);
        } else {
            fStatement.setTimestamp(18, new Timestamp(updatedAtTo.getTime()));
        }
        if (updatedAtTo == null) {
            fStatement.setNull(19, java.sql.Types.TIMESTAMP);
        } else {
            fStatement.setTimestamp(19, new Timestamp(updatedAtTo.getTime()));
        }
    }

    /**
     * 検索型クエリを実行します。<br>
     *
     * @throws DeadlockException データベースデッドロックが発生した場合。
     * @throws TimeoutException データベースタイムアウトが発生した場合。
     * @throws SQLException SQL例外が発生した場合。
     */
    public void executeQuery() throws DeadlockException, TimeoutException, SQLException {
        if (fStatement == null) {
            // PreparedStatementが未取得の状態なので、PreparedStatement.executeQuery()実行に先立ちprepareStatement()メソッドを呼び出して取得します。
            prepareStatement();
        }
        if (fResultSet != null) {
            // 前回の結果セット(ResultSet)が残っているので、これを一旦開放します。
            fResultSet.close();
            fResultSet = null;
        }

        try {
            fResultSet = fStatement.executeQuery();
        } catch (SQLException ex) {
            throw BlancoDbUtil.convertToBlancoException(ex);
        }
    }

    /**
     * カーソルを現在の位置から1行次へ移動します。
     *
     * @return 新しい現在の行が有効な場合はtrue、それ以上の行がない場合はfalse。
     * @throws DeadlockException データベースデッドロックが発生した場合。
     * @throws TimeoutException データベースタイムアウトが発生した場合。
     * @throws SQLException SQL例外が発生した場合。
     */
    public boolean next() throws DeadlockException, TimeoutException, SQLException {
        if (fResultSet == null) {
            executeQuery();
        }

        try {
            return fResultSet.next();
        } catch (SQLException ex) {
            throw BlancoDbUtil.convertToBlancoException(ex);
        }
    }

    /**
     * 現在の行のデータをオブジェクトとして取得します。
     *
     * このメソッドを呼び出す前に、next()などのカーソルを操作するメソッドを呼び出す必要があります。
     *
     * @return 行オブジェクト。
     * @throws SQLException SQL例外が発生した場合。
     */
    public C00S02UsersRow getRow() throws SQLException {
        C00S02UsersRow result = new C00S02UsersRow();
        result.set1(fResultSet.getString(1));

        return result;
    }

    /**
     * ステートメント (java.sql.PreparedStatement) を取得します。
     * @deprecated 基本的にStatementは外部から直接利用する必要はありません。
     *
     * @return 内部的に利用されている java.sql.PreparedStatementオブジェクト
     */
    public PreparedStatement getStatement() {
        return fStatement;
    }

    /**
     * 内部的に保持されているResultSetオブジェクトを取得します。
     *
     * @deprecated 基本的にResultSetは外部から直接利用する必要はありません。
     *
     * @return ResultSetオブジェクト。
     */
    public ResultSet getResultSet() {
        return fResultSet;
    }

    /**
     * 検索結果をリストの形式で取得します。
     *
     * リストには C00S02Usersクラスが格納されます。<br>
     * 検索結果の件数があらかじめわかっていて、且つ件数が少ない場合に利用することができます。<br>
     * 検索結果の件数が多い場合には、このメソッドは利用せず、代わりに next()メソッドを利用することをお勧めします。<br>
     * このQueryIteratorは FORWARD_ONLY(順方向カーソル)です。このgetListメソッドの利用は極力避けてください。または スクロールカーソルとして再生成してください。
     *
     * @param size 読み出しを行う行数。
     * @return C00S02UsersクラスのList。検索結果が0件の場合には空のリストが戻ります。
     * @throws SQLException SQL例外が発生した場合。
     */
    public List getList(final int size) throws SQLException {
        List result = new ArrayList(size);
        for (int count = 1; count <= size; count++) {
            if (next() == false) {
                break;
            }
            result.add(getRow());
        }
        return result;
    }

    /**
     * このクラスのクローズ処理をおこないます。
     *
     * 内部的に生成していたJDBCリソースのオブジェクトに対して close()メソッドの呼び出しをおこないます。<br>
     * クラスの利用が終わったら、必ずこのメソッドを呼び出すようにします。
     *
     * @throws SQLException SQL例外が発生した場合。
     */
    public void close() throws SQLException {
        try {
            if (fResultSet != null) {
                fResultSet.close();
                fResultSet = null;
            }
        } finally {
            if (fStatement != null) {
                fStatement.close();
                fStatement = null;
            }
        }
    }

    /**
     * finalizeメソッド。
     *
     * このクラスが内部的に生成したオブジェクトのなかで、close()呼び出し忘れバグが存在するかどうかチェックします。<br>
     *
     * @throws Throwable finalize処理の中で発生した例外。
     */
    protected void finalize() throws Throwable {
        super.finalize();
        if (fStatement != null) {
            final String message = "C00S02UsersIterator : close()メソッドによるリソースの開放が行われていません。";
            System.out.println(message);
        }
    }
}
